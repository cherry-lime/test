generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  password               String
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  username               String                   @unique
  user_id                Int                      @id @default(autoincrement())
  role                   Role[]
  AssessmentParticipants AssessmentParticipants[]
  UserInTeam             UserInTeam[]

  @@index([role])
}

model Checkpoint {
  checkpoint_id                     Int                                 @id @default(autoincrement())
  checkpoint_name                   String
  checkpoint_description            String
  weight                            Int
  maturity_id                       Int
  category_id                       Int
  Category                          Category                            @relation(fields: [category_id], references: [category_id])
  Maturity                          Maturity                            @relation(fields: [maturity_id], references: [maturity_id])
  CheckpointAndAnswersInAssessments CheckpointAndAnswersInAssessments[]
  CheckpointInTopic                 CheckpointInTopic[]
}

model PossibleAnswers {
  possible_answer_id                Int                                 @id @default(autoincrement())
  answer                            String
  answer_weight                     Float
  template_id                       Int
  Template                          Template                            @relation(fields: [template_id], references: [template_id])
  CheckpointAndAnswersInAssessments CheckpointAndAnswersInAssessments[]
}

model Maturity {
  maturity_id    Int          @id @default(autoincrement())
  maturity_name  String
  maturity_order Int
  Checkpoint     Checkpoint[]
  Feedback       Feedback[]
}

model Topic {
  topic_id          Int                 @id @default(autoincrement())
  topic_name        String
  template_id       Int
  Template          Template            @relation(fields: [template_id], references: [template_id])
  CheckpointInTopic CheckpointInTopic[]
  Feedback          Feedback[]
}

model CheckpointInTopic {
  checkpoint_id Int
  topic_id      Int
  checkpoint    Checkpoint @relation(fields: [checkpoint_id], references: [checkpoint_id])
  topic         Topic      @relation(fields: [topic_id], references: [topic_id])

  @@id([topic_id, checkpoint_id])
}

model Team {
  team_id      Int          @id @default(autoincrement())
  team_name    String
  invite_token String       @db.Uuid
  UserInTeam   UserInTeam[]
}

model UserInTeam {
  team_id   Int
  joined_at DateTime @default(now())
  user_id   Int
  team      Team     @relation(fields: [team_id], references: [team_id])
  user      User     @relation(fields: [user_id], references: [user_id])

  @@id([user_id, team_id])
  @@index([team_id, user_id])
}

model Assessment {
  assessment_id                     Int                                 @id @default(autoincrement())
  assessment_name                   String
  country_name                      String
  department_name                   String
  created_at                        DateTime                            @default(now())
  updated_at                        DateTime                            @updatedAt
  completed_at                      DateTime
  assessment_type                   AssessmentType
  template_id                       Int
  template                          Template                            @relation(fields: [template_id], references: [template_id])
  AssessmentParticipants            AssessmentParticipants[]
  CheckpointAndAnswersInAssessments CheckpointAndAnswersInAssessments[]
}

model AssessmentParticipants {
  assessment_id Int
  user_id       Int
  role          Role
  Assessment    Assessment @relation(fields: [assessment_id], references: [assessment_id])
  User          User       @relation(fields: [user_id], references: [user_id])

  @@id([user_id, assessment_id])
  @@index([assessment_id, user_id])
}

model Template {
  template_id       Int               @id @default(autoincrement())
  template_name     String
  template_type     AssessmentType
  disabled          Boolean           @default(false)
  include_no_answer Boolean           @default(false)
  score_formula     String            @default("sum(x)")
  weight_range_max  Int               @default(3)
  weight_range_min  Int               @default(1)
  Assessment        Assessment[]
  Category          Category[]
  PossibleAnswers   PossibleAnswers[]
  Topic             Topic[]

  @@map("AssessmentTemplate")
}

model Category {
  category_id   Int          @id @default(autoincrement())
  category_name String
  color         Int
  template_id   Int
  Template      Template     @relation(fields: [template_id], references: [template_id])
  Checkpoint    Checkpoint[]
  Feedback      Feedback[]
  SubArea       SubArea[]
}

model SubArea {
  subarea_id          Int      @id @default(autoincrement())
  subarea_name        String
  subarea_summary     String
  subarea_description String
  category_id         Int
  Category            Category @relation(fields: [category_id], references: [category_id])
}

model CheckpointAndAnswersInAssessments {
  assessment_id      Int
  checkpoint_id      Int
  possible_answer_id Int
  assessment         Assessment      @relation(fields: [assessment_id], references: [assessment_id])
  checkpoint         Checkpoint      @relation(fields: [checkpoint_id], references: [checkpoint_id])
  answer             PossibleAnswers @relation(fields: [possible_answer_id], references: [possible_answer_id])

  @@id([assessment_id, checkpoint_id])
}

model Feedback {
  feedback_id   Int      @id @default(autoincrement())
  feedback_name String
  feedback_text String
  topic_id      Int
  maturity_id   Int
  answer_weight Float
  category_id   Int
  weight_factor Int
  Category      Category @relation(fields: [category_id], references: [category_id])
  Maturity      Maturity @relation(fields: [maturity_id], references: [maturity_id])
  Topic         Topic    @relation(fields: [topic_id], references: [topic_id])
}

enum AssessmentType {
  INDIVIDUAL
  TEAM
}

enum Role {
  USER
  ASSESSOR
  ADMIN
}
