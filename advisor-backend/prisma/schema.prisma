// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id                Int                      @id @default(autoincrement())
  username               String                   @unique
  password_hash          String                   @default(uuid())
  roles                   Role[]                    // @default(USER)
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  UserInTeam             UserInTeam[]
  AssessmentParticipants AssessmentParticipants[]
  TeamInvite TeamInvite[]
  @@index([roles])
}

model Checkpoint {
  checkpoint_id                     Int                                 @id @default(autoincrement())
  checkpoint_name                   String
  checkpoint_description            String
  weight                            Int
  Maturity                          Maturity                            @relation(fields: [maturity_id], references: [maturity_id])
  maturity_id                       Int
  CheckpointInTopic                 CheckpointInTopic[]
  CheckpointInTemplateCategory      CheckpointInTemplateCategory[]
  CheckpointAndAnswersInAssessments CheckpointAndAnswersInAssessments[]
}

model PossibleAnswers {
  possible_answer_id                Int                                 @id @default(autoincrement())
  answer                            String
  answer_weight                     Float
  disabled                          Boolean                             @default(false)
  CheckpointAndAnswersInAssessments CheckpointAndAnswersInAssessments[]
}

model Maturity {
  maturity_id    Int          @id @default(autoincrement())
  maturity_name  String
  maturity_order Int
  Checkpoint     Checkpoint[]
  Feedback       Feedback[]
}

model Topic {
  topic_id          Int                 @id @default(autoincrement())
  topic_name        String
  CheckpointInTopic CheckpointInTopic[]
  Feedback          Feedback[]
}

model CheckpointInTopic {
  checkpoint    Checkpoint @relation(fields: [checkpoint_id], references: [checkpoint_id])
  checkpoint_id Int
  topic         Topic      @relation(fields: [topic_id], references: [topic_id])
  topic_id      Int
  @@id([topic_id, checkpoint_id])
}

model Team {
  team_id    Int          @id @default(autoincrement())
  team_name  String
  UserInTeam UserInTeam[]
  TeamInvite TeamInvite[]
}

model TeamInvite {
  team_invite_id String   @id @default(uuid()) @db.Uuid()
  Team           Team     @relation(fields: [team_id], references: [team_id])
  team_id        Int
  User           User     @relation(fields: [user_id], references: [user_id])
  user_id        Int
  created_at     DateTime @default(now())
}

model UserInTeam {
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   Int
  team      Team     @relation(fields: [team_id], references: [team_id])
  team_id   Int
  joined_at DateTime @default(now())
  @@id([user_id, team_id])
  @@index([team_id, user_id])
}

model Assessment {
  assessment_id                     Int                                 @id @default(autoincrement())
  assessment_name                   String
  country_name                      String
  department_name                   String
  created_at                        DateTime                            @default(now())
  updated_at                        DateTime                            @updatedAt
  completed_at                      DateTime
  assessment_type                   AssessmentType
  template                          AssessmentTemplate                  @relation(fields: [template_id], references: [template_id])
  template_id                       Int
  AssessmentParticipants            AssessmentParticipants[]
  CheckpointAndAnswersInAssessments CheckpointAndAnswersInAssessments[]
}

model AssessmentParticipants {
  User          User       @relation(fields: [user_id], references: [user_id])
  user_id       Int
  Assessment    Assessment @relation(fields: [assessment_id], references: [assessment_id])
  assessment_id Int
  role          Role
  @@id([user_id, assessment_id])
  @@index([assessment_id, user_id])
}

model AssessmentTemplate {
  template_id        Int                  @id @default(autoincrement())
  template_name      String
  template_type      AssessmentType
  disabled           Boolean              @default(false)
  Assessment         Assessment[]
  CategoryInTemplate CategoryInTemplate[]
}

model Category {
  category_id        Int                  @id @default(autoincrement())
  category_name      String
  color              Int
  CategoryInTemplate CategoryInTemplate[]
  Feedback           Feedback[]
}

model CategoryInTemplate {
  template_category_id         Int                            @id @default(autoincrement())
  category                     Category                       @relation(fields: [category_id], references: [category_id])
  category_id                  Int
  template                     AssessmentTemplate             @relation(fields: [template_id], references: [template_id])
  template_id                  Int
  CheckpointInTemplateCategory CheckpointInTemplateCategory[]
  SubAreaInTemplateCategory SubAreaInTemplateCategory[]
  @@index([template_id, category_id])
}

model SubArea {
  subarea_id                Int                         @id @default(autoincrement())
  subarea_name              String
  subarea_summary           String
  subarea_description       String
  SubAreaInTemplateCategory SubAreaInTemplateCategory[]
}

model CheckpointInTemplateCategory {
  CategoryInTemplate   CategoryInTemplate @relation(fields: [template_category_id], references: [template_category_id])
  template_category_id Int
  Checkpoint           Checkpoint         @relation(fields: [checkpoint_id], references: [checkpoint_id])
  checkpoint_id        Int
  @@id([template_category_id, checkpoint_id])
}

model SubAreaInTemplateCategory {
  CategoryInTemplate   CategoryInTemplate @relation(fields: [template_category_id], references: [template_category_id])
  template_category_id Int
  subarea              SubArea            @relation(fields: [subarea_id], references: [subarea_id])
  subarea_id           Int
  @@id([template_category_id, subarea_id])
}

model CheckpointAndAnswersInAssessments {
  assessment         Assessment      @relation(fields: [assessment_id], references: [assessment_id])
  assessment_id      Int
  checkpoint         Checkpoint      @relation(fields: [checkpoint_id], references: [checkpoint_id])
  checkpoint_id      Int
  answer             PossibleAnswers @relation(fields: [possible_answer_id], references: [possible_answer_id])
  possible_answer_id Int
  @@id([assessment_id, checkpoint_id])
}

model Feedback {
  feedback_id   Int      @id @default(autoincrement())
  feedback_name String
  feedback_text String
  Topic         Topic    @relation(fields: [topic_id], references: [topic_id])
  topic_id      Int
  Maturity      Maturity @relation(fields: [maturity_id], references: [maturity_id])
  maturity_id   Int
  answer_weight Float
  Category      Category @relation(fields: [category_id], references: [category_id])
  category_id   Int
  weight_factor Int
}

enum AssessmentType {
  INDIVIDUAL
  TEAM
}

enum Role {
  USER
  ASSESSOR
  ADMIN
}